generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "mysql"
  // url      = "mysql://root:newrootpassword@db:3306/api"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../ERD.png"
//   includeRelationFromFields = true
//   disableEmoji = true
//   theme = "forest"
// }

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  password        String
  email           String            @unique
  role            String            @default("user")
  proposed_role   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  date_of_birth   DateTime
  tournaments     Tournament[]
  participant     Participant[]
  tournamentStaff TournamentStaff[]
}

model Tournament {
  id                      Int              @id @default(autoincrement())
  name                    String
  description             String
  no_of_courts            Int
  country                 String
  city                    String
  address_additional_info String?
  address_name            String
  start_date              DateTime
  end_date                DateTime
  is_visible              Boolean          @default(false)
  is_registration_open    Boolean          @default(false)
  max_participants        Int?
  organizer               User             @relation(fields: [organizerId], references: [id])
  organizerId             Int
  participants            Participant[]
  draws                   Draw[]
  OrderOfPlay             OrderOfPlay[]
  Location                Location[]
  tournamentStaff         TournamentStaff? @relation(fields: [tournamentStaffId], references: [id])
  tournamentStaffId       Int?             @unique
}

model TournamentStaff {
  id           Int         @id @default(autoincrement())
  tournament   Tournament?
  staffMembers User[]
}

model Participant {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  tournament   Tournament  @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  Draw         Draw?       @relation(fields: [drawId], references: [id])
  drawId       Int?
  drawOrderNo  Int?
  matches      Match[]
  ScoreUnit    ScoreUnit[]
  place        Int?
}

model Draw {
  id           Int           @id @default(autoincrement())
  name         String
  Tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  tournamentId Int?
  numOfTeams   Int           @default(2)
  isPublished  Boolean       @default(false)
  participants Participant[]
  matches      Match[]
}

model Match {
  id            Int           @id @default(autoincrement())
  participants  Participant[]
  draw          Draw          @relation(fields: [drawId], references: [id])
  drawId        Int
  winnerId      Int?
  score         String?
  startTime     DateTime?
  OrderOfPlay   OrderOfPlay?  @relation(fields: [orderOfPlayId], references: [id])
  orderOfPlayId Int?
  ScoreUnit     ScoreUnit[]
}

model OrderOfPlay {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  matches      Match[]
  Location     Location?  @relation(fields: [locationId], references: [id])
  locationId   Int?
  date         DateTime
  isPublished  Boolean    @default(false)
}

model Location {
  id           Int           @id @default(autoincrement())
  ordersOfPlay OrderOfPlay[]
  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  name         String
}

model ScoreUnit {
  id            Int         @id @default(autoincrement())
  match         Match       @relation(fields: [matchId], references: [id])
  participant   Participant @relation(fields: [participantId], references: [id])
  index         Int
  score         Int
  matchId       Int
  participantId Int
}
