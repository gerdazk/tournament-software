generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:newrootpassword@127.0.0.1:3306/api"
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  password      String
  email         String        @unique
  role          String        @default("user")
  proposed_role String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  date_of_birth DateTime
  tournaments   Tournament[]
  participant   Participant[]
}

model Tournament {
  id                      Int           @id @default(autoincrement())
  name                    String
  description             String
  no_of_courts            Int
  country                 String
  city                    String
  address_additional_info String?
  address_name            String
  start_date              DateTime
  end_date                DateTime
  is_visible              Boolean       @default(false)
  is_registration_open    Boolean       @default(false)
  max_participants        Int?
  organizer               User          @relation(fields: [organizerId], references: [id])
  organizerId             Int
  participants            Participant[]
  draws                   Draw[]
  OrderOfPlay             OrderOfPlay[]
  Location                Location[]
}

model Participant {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  Draw         Draw?      @relation(fields: [drawId], references: [id])
  drawId       Int?
  drawOrderNo  Int?
  matches      Match[]
}

model Draw {
  id           Int           @id @default(autoincrement())
  name         String
  Tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  tournamentId Int?
  numOfTeams   Int           @default(2)
  isPublished  Boolean       @default(false)
  participants Participant[]
  matches      Match[]
}

model Match {
  id            Int           @id @default(autoincrement())
  participants  Participant[]
  draw          Draw          @relation(fields: [drawId], references: [id])
  drawId        Int
  winnerId      Int?
  score         String?
  OrderOfPlay   OrderOfPlay?  @relation(fields: [orderOfPlayId], references: [id])
  orderOfPlayId Int?
}

model OrderOfPlay {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  matches      Match[]
  Location     Location?  @relation(fields: [locationId], references: [id])
  locationId   Int?
}

model Location {
  id           Int           @id @default(autoincrement())
  ordersOfPlay OrderOfPlay[]
  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  name String
}
